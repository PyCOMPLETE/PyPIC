import pyopencl as cl
import pyopencl.array as cl_array
import numpy as np
import numpy.linalg as la

ctx = cl.create_some_context()
queue = cl.CommandQueue(ctx)

# Here he makes the sum of the two arrays 
# with an explicit kernel                 
src_files = [
    '../../xfields/src_c/atomicadd.clh',
    '../../xfields/src_autogenerated/linear_interpolators_pocl.clh']

src_content = ''
for ff in src_files:
    with open(ff, 'r') as fid:
        src_content += ('\n\n' + fid.read())

prg = cl.Program(ctx, src_content).build()
knl_p2m_rectmesh3d = prg.p2m_rectmesh3d
knl_m2p_rectmesh3d = prg.m2p_rectmesh3d

import pickle
with open('../000_sphere/picsphere.pkl', 'rb') as fid:
    ddd = pickle.load(fid)

fmap = ddd['fmap']
x0 = fmap.x_grid[0]
y0 = fmap.y_grid[0]
z0 = fmap.z_grid[0]

dx = fmap.dx
dy = fmap.dy
dz = fmap.dz

nx = fmap.nx
ny = fmap.ny
nz = fmap.nz


pos_in_buffer_of_maps_to_interp = []
mapsize = fmap.nx*fmap.ny*fmap.nz
pos_in_buffer_of_maps_to_interp.append(0*mapsize)
pos_in_buffer_of_maps_to_interp.append(1*mapsize)
pos_in_buffer_of_maps_to_interp.append(2*mapsize)
pos_in_buffer_of_maps_to_interp.append(3*mapsize)
pos_in_buffer_of_maps_to_interp.append(4*mapsize)

nmaps_to_interp = len(pos_in_buffer_of_maps_to_interp)

x_dev = cl_array.to_device(queue, ddd['x_test'])
y_dev = cl_array.to_device(queue, ddd['y_test'])
z_dev = cl_array.to_device(queue, ddd['z_test'])
n_particles = len(x_dev)
dev_offsets = cl_array.to_device(queue,
        np.array(pos_in_buffer_of_maps_to_interp, dtype=np.int32))
dev_maps_buff = cl_array.to_device(queue, fmap._maps_buffer)
dev_out_buff = cl_array.to_device(queue,
        np.zeros(nmaps_to_interp*n_particles))
n_threads = n_particles


knl_m2p_rectmesh3d(queue, (n_threads,), None,
        np.int32(n_particles),
        x_dev.data, y_dev.data, z_dev.data,
        x0, y0, z0, dx, dy, dz,
        np.int32(nx), np.int32(ny), np.int32(nz),
        np.int32(nmaps_to_interp),
        dev_offsets.data, dev_maps_buff.data,
        dev_out_buff.data)

# Test p2m
n_gen = 1000000
x_gen_dev = cl_array.to_device(queue,
        np.zeros([n_gen], dtype=np.float64)+fmap.x_grid[10]
        + 20* dx* np.linspace(0, 1., n_gen))
y_gen_dev = cl_array.to_device(queue,
        np.zeros([n_gen], dtype=np.float64)+fmap.y_grid[10]
        + 20*dy* np.linspace(0, 1., n_gen))
z_gen_dev = cl_array.to_device(queue,
        np.zeros([n_gen], dtype=np.float64)+fmap.z_grid[10]
        + 20*dz* np.linspace(0, 1., n_gen))
part_weights_dev = cl_array.to_device(queue,
        np.arange(0, n_gen, 1,  dtype=np.float64))
dev_buff = cl_array.to_device(queue, 0*fmap._maps_buffer)
dev_rho = dev_buff[:,:,:,1] # This does not support .data
#dev_rho = dev_buff[:,:,:,0]

import time
t1 = time.time()

event = knl_p2m_rectmesh3d(queue, (n_gen,), None,
        np.int32(n_gen),
        x_gen_dev.data,
        y_gen_dev.data,
        z_gen_dev.data,
        part_weights_dev.data,
        x0, y0, z0, dx, dy, dz,
        np.int32(nx), np.int32(ny), np.int32(nz),
        dev_rho.base_data[dev_rho.offset:])
event.wait()
t2 = time.time()
print(f't = {t2-t1:.2e}')

assert(np.isclose(np.sum(dev_rho.get())*dx*dy*dz,
    np.sum(part_weights_dev.get())))
