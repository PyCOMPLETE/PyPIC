

todo = [
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_cpu.h',
         'platform': 'cpu',
        },
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_cpu.c',
         'platform': 'cpu',
        },
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_pocl.clh',
         'platform': 'opencl',
        },
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_cuda.cu',
         'platform': 'cuda',
        },
    ]

for job in todo:

    fname = job['src_file']
    newfname = job['out_file']
    platform = job['platform']

    assert platform in ['cpu', 'opencl', 'cuda']

    with open(fname, 'r') as fid:
        lines = fid.readlines()

    indent = True
    new_lines = []
    inside_vect_block = False
    for ii, ll in enumerate(lines):
        if '//vectorize_over' in ll:
            if inside_vect_block:
                raise ValueError(
                        f'Line {ii}: Previous vect block not closed!')
            inside_vect_block = True
            varname, limname = ll.split('//vectorize_over')[-1].split()
            if platform == 'cpu':
                new_lines.append(f'int {varname}; //autovectorized\n')
                new_lines.append(
                    f'for ({varname}=0; {varname}<{limname}; {varname}++)'
                    +'{ //autovectorized\n')
            elif platform == 'opencl':
                new_lines.append(f'int {varname}; //autovectorized\n')
                new_lines.append(
                    f'{varname}=get_global_id(0); //autovectorized\n')
            elif platform == 'cuda':
                new_lines.append(f'int {varname}; //autovectorized\n')
                new_lines.append(
                    f'{varname}=blockDim.x * blockIdx.x + threadIdx.x;'
                      '//autovectorized\n')
        elif '//end_vectorize' in ll:
            if platform == 'cpu':
                new_lines.append('}//end autovectorized\n')
            elif platform == 'opencl':
                new_lines.append('//end autovectorized\n')
            elif platform == 'cuda':
                new_lines.append('//end autovectorized\n')

            inside_vect_block = False
        else:
            if '//only_for_platform' in ll:
                ptemp = ll.split(
                    '//only_for_platform')[-1].split()[0].strip()
                if platform != ptemp:
                    ll = '//' + ll
            if indent and inside_vect_block:
                new_lines.append('    ' + ll)
            else:
                new_lines.append(ll)

    newfilecontent = ''.join(new_lines)
    newfilecontent = newfilecontent.replace('/*gpukern*/',
        {'cpu':' ', 'opencl': ' __kernel ', 'cuda': '__global__'}[platform])
    newfilecontent = newfilecontent.replace('/*gpuglmem*/',
        {'cpu':' ', 'opencl': ' __global ', 'cuda': ' '}[platform])

    with open(newfname, 'w') as fid:
        fid.write(newfilecontent)
